<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mental Chessters - Voice Chess Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <style>
        * {
            font-family: 'Poppins', sans-serif;
        }

        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .game-container {
            backdrop-filter: blur(10px);
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }

        .chessboard {
            display: grid;
            grid-template-columns: repeat(8, minmax(0, 1fr));
            grid-template-rows: repeat(8, minmax(0, 1fr));
            width: 480px;
            height: 480px;
            border: 6px solid #8B4513;
            border-radius: 12px;
            box-shadow: 
                0 0 0 3px #D4AF37,
                0 20px 40px rgba(0, 0, 0, 0.3),
                inset 0 0 0 2px rgba(255, 255, 255, 0.1);
        }

        .square {
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            transition: all 0.2s ease;
        }

        .square.light {
            background: linear-gradient(135deg, #f0d9b5 0%, #e8d1a6 100%);
        }

        .square.dark {
            background: linear-gradient(135deg, #b58863 0%, #a67c52 100%);
        }

        .square:hover {
            box-shadow: inset 0 0 20px rgba(255, 215, 0, 0.3);
        }

        .square.highlight {
            box-shadow: inset 0 0 30px rgba(255, 215, 0, 0.6);
            border: 2px solid #FFD700;
        }

        .piece {
            font-size: 42px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
            user-select: none;
        }

        .piece.white {
            color: #ffffff;
            filter: drop-shadow(0 0 8px rgba(0, 0, 0, 0.8));
        }

        .piece.black {
            color: #2c2c2c;
            filter: drop-shadow(0 0 6px rgba(255, 255, 255, 0.6));
        }

        .status-panel {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .title {
            background: linear-gradient(45deg, #FFD700, #FFA500, #FFD700);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .voice-button {
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .voice-button.listening {
            animation: pulse 2s ease-in-out infinite;
            background: radial-gradient(circle, rgba(255, 0, 0, 0.3), rgba(255, 0, 0, 0.1));
        }

        .voice-button.processing {
            animation: spin 1s linear infinite;
        }

        @keyframes pulse {
            0%, 100% { 
                transform: scale(1); 
                box-shadow: 0 0 0 0 rgba(255, 0, 0, 0.7);
            }
            50% { 
                transform: scale(1.05); 
                box-shadow: 0 0 0 10px rgba(255, 0, 0, 0);
            }
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .ai-thinking {
            animation: thinking 2s ease-in-out infinite;
        }

        @keyframes thinking {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .pulse {
            animation: pulse-icon 1s ease-in-out infinite;
        }

        @keyframes pulse-icon {
            0%, 100% { 
                opacity: 1;
                transform: scale(1);
            }
            50% { 
                opacity: 0.7;
                transform: scale(1.1);
            }
        }

        .network-warning {
            background: linear-gradient(45deg, #ff6b6b, #feca57);
            border: 2px solid #ff6b6b;
            animation: shake 0.5s ease-in-out;
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        kbd {
            display: inline-block;
            padding: 2px 6px;
            font-family: monospace;
            font-size: 11px;
            background: rgba(0, 0, 0, 0.4);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 3px;
            box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.25);
        }

        .offline-mode {
            animation: offline-blink 2s ease-in-out infinite;
        }

        @keyframes offline-blink {
            0%, 50% { opacity: 1; }
            25%, 75% { opacity: 0.7; }
        }

        .voice-command-display {
            min-height: 50px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 8px;
            padding: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        @media (max-width: 768px) {
            .chessboard {
                width: 320px;
                height: 320px;
            }
            .piece {
                font-size: 28px;
            }
        }
    </style>
</head>
<body>
    <div class="min-h-screen p-4 lg:p-8">
        <!-- Header -->
        <div class="text-center mb-8">
            <h1 class="text-5xl lg:text-6xl font-bold title mb-2">
                <i class="fas fa-microphone mr-3"></i>
                Voice Chess Battle
                <i class="fas fa-volume-up ml-3"></i>
            </h1>
            <p class="text-white text-lg opacity-80">Play chess with your voice - Difficulty: 
                <span class="font-bold text-yellow-300 uppercase"><%= difficulty %></span>
            </p>
            <div id="networkWarning" class="mt-4 p-3 bg-orange-500 bg-opacity-20 border border-orange-400 rounded-lg text-orange-200 text-sm hidden">
                <i class="fas fa-exclamation-triangle mr-2"></i>
                <strong>Voice Recognition Issue:</strong> If you get network errors, try using <strong>Chrome browser</strong> or type your moves manually below.
            </div>
            
            <% if (typeof isHTTPS !== 'undefined' && !isHTTPS) { %>
            <div class="mt-4 p-4 bg-blue-500 bg-opacity-20 border border-blue-400 rounded-lg text-blue-200 text-sm">
                <i class="fas fa-info-circle mr-2"></i>
                <strong>Better Voice Recognition:</strong> For the best voice experience, 
                <a href="<%= httpsUrl %>" class="text-blue-300 hover:text-blue-100 underline font-semibold">switch to HTTPS version</a>
                <div class="mt-2 text-xs opacity-75">
                    HTTPS URL: <code class="bg-black bg-opacity-30 px-2 py-1 rounded"><%= httpsUrl %></code>
                </div>
            </div>
            <% } else if (typeof isHTTPS !== 'undefined' && isHTTPS) { %>
            <div class="mt-4 p-3 bg-green-500 bg-opacity-20 border border-green-400 rounded-lg text-green-200 text-sm">
                <i class="fas fa-check-circle mr-2"></i>
                <strong>Secure Connection:</strong> You're using HTTPS - voice recognition should work perfectly!
            </div>
            <% } %>
            
            <% if (typeof user !== 'undefined' && user) { %>
            <p class="text-yellow-300 mt-2">
                <i class="fas fa-user mr-1"></i>
                Playing as <%= user.username %>
            </p>
            <% } %>
        </div>

        <!-- Main Game Container -->
        <div class="flex flex-col lg:flex-row items-center justify-center gap-8 max-w-7xl mx-auto">
            <!-- Game Status Panel -->
            <div class="status-panel p-6 w-full lg:w-80">
                <h3 class="text-white text-xl font-semibold mb-4 text-center">
                    <i class="fas fa-info-circle mr-2"></i>Game Status
                </h3>
                
                <!-- Players -->
                <div class="mb-6">
                    <div class="p-3 rounded-lg bg-blue-500 bg-opacity-20 mb-2">
                        <div class="flex items-center justify-between">
                            <span class="text-white font-medium">
                                <i class="fas fa-user mr-2"></i>You (White)
                            </span>
                            <div class="w-4 h-4 bg-white rounded-full"></div>
                        </div>
                    </div>
                    <div class="p-3 rounded-lg bg-red-500 bg-opacity-20">
                        <div class="flex items-center justify-between">
                            <span class="text-white font-medium">
                                <i class="fas fa-robot mr-2"></i>AI (Black)
                            </span>
                            <div class="w-4 h-4 bg-gray-800 rounded-full"></div>
                        </div>
                    </div>
                </div>

                <!-- Game Info -->
                <div class="space-y-3">
                    <div class="flex justify-between items-center text-white">
                        <span class="opacity-80">Difficulty:</span>
                        <span class="font-semibold text-yellow-300"><%= difficulty %></span>
                    </div>
                    <div class="flex justify-between items-center text-white">
                        <span class="opacity-80">Turn:</span>
                        <span class="font-semibold" id="currentTurn">White to move</span>
                    </div>
                    <div class="flex justify-between items-center text-white">
                        <span class="opacity-80">Status:</span>
                        <span class="font-semibold text-green-400" id="gameStatus">In Progress</span>
                    </div>
                </div>

                <!-- Voice Controls -->
                <div class="mt-6 p-4 bg-purple-500 bg-opacity-20 rounded-lg">
                    <h4 class="text-purple-300 font-semibold mb-3 text-center">
                        <i class="fas fa-microphone mr-2"></i>Voice Controls
                    </h4>
                    
                    <!-- Voice Button -->
                    <button id="voiceBtn" class="voice-button w-full p-4 rounded-lg bg-red-500 bg-opacity-30 hover:bg-opacity-50 text-white font-semibold transition-all mb-3">
                        <i class="fas fa-microphone mr-2"></i>
                        <span id="voiceBtnText">Start Listening</span>
                    </button>

                    <!-- Voice Command Display -->
                    <div class="voice-command-display">
                        <div class="text-xs text-purple-300 mb-1">Voice Command:</div>
                        <div class="text-white text-sm" id="voiceCommandText">Click "Start Listening" to begin</div>
                    </div>

                    <!-- Voice Tips -->
                    <div class="mt-3 text-xs text-purple-300">
                        <div class="font-semibold mb-1">Examples:</div>
                        <div>• "Pawn to e4"</div>
                        <div>• "Knight to f3"</div>
                        <div>• "Castle kingside"</div>
                    </div>
                </div>

                <!-- AI Status -->
                <div class="mt-6 p-3 bg-purple-500 bg-opacity-20 rounded-lg" id="aiStatusPanel">
                    <div class="flex items-center text-purple-300" id="aiStatus">
                        <div class="w-2 h-2 bg-purple-400 rounded-full mr-2"></div>
                        <span class="text-sm font-medium">AI Ready</span>
                    </div>
                </div>
            </div>

            <!-- Chessboard -->
            <div class="game-container p-8 rounded-3xl">
                <div class="chessboard" id="chessboard">
                    <!-- Squares will be generated by JavaScript -->
                </div>
            </div>

            <!-- Move History Panel -->
            <div class="status-panel p-6 w-full lg:w-80">
                <h3 class="text-white text-xl font-semibold mb-4 text-center">
                    <i class="fas fa-history mr-2"></i>Move History
                </h3>
                <div class="max-h-64 overflow-y-auto" id="moveHistory">
                    <p class="text-white opacity-60 text-center">Make your first move!</p>
                </div>
                
                <!-- Game Controls -->
                <div class="mt-6 space-y-2">
                    <button id="newGameBtn" class="w-full bg-green-500 bg-opacity-20 hover:bg-opacity-30 text-green-300 py-2 px-4 rounded-lg transition-all">
                        <i class="fas fa-plus mr-2"></i>New Game
                    </button>
                    <button id="undoBtn" class="w-full bg-yellow-500 bg-opacity-20 hover:bg-opacity-30 text-yellow-300 py-2 px-4 rounded-lg transition-all">
                        <i class="fas fa-undo mr-2"></i>Undo Move
                    </button>
                    <button id="toggleSpeechBtn" class="w-full bg-blue-500 bg-opacity-20 hover:bg-opacity-30 text-blue-300 py-2 px-4 rounded-lg transition-all">
                        <i class="fas fa-volume-up mr-2"></i>
                        <span id="speechToggleText">Speech: ON</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Back Button -->
        <div class="fixed top-6 left-6">
            <button onclick="window.location='/game-mode'" class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-3 rounded-full backdrop-blur-md transition-all">
                <i class="fas fa-arrow-left"></i>
            </button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.min.js"></script>
    <script src="/offline-speech.js"></script>
    <script>
        const game = new Chess();
        const difficulty = '<%= difficulty %>';
        let isPlayerTurn = true;
        let gameBoard = document.getElementById('chessboard');
        let speechEnabled = true;
        
        // Speech Recognition Setup
        let recognition = null;
        let offlineRecognition = null;
        let isListening = false;
        let speechSynthesis = window.speechSynthesis;
        let useOfflineMode = false;
        let networkCheckFailed = false;
        
        // Check network connectivity for speech recognition
        async function checkNetworkForSpeech() {
            try {
                // Try to reach a simple endpoint to check internet connectivity
                const response = await fetch('https://www.google.com/favicon.ico', {
                    method: 'HEAD',
                    mode: 'no-cors',
                    cache: 'no-cache',
                    signal: AbortSignal.timeout(3000)
                });
                return true;
            } catch (error) {
                console.log('Network check failed for speech recognition:', error);
                return false;
            }
        }

        // Initialize Speech Recognition
        async function initSpeechRecognition() {
            // Check if we have network connectivity
            const hasNetwork = await checkNetworkForSpeech();
            networkCheckFailed = !hasNetwork;
            
            if (!hasNetwork) {
                console.log('⚠️ No internet connection detected - using offline mode');
                updateVoiceCommandText('🔴 Offline Mode - Use text input or keyboard shortcuts');
                initOfflineMode();
                showFallbackInput();
                return;
            }
            if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
                const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                recognition = new SpeechRecognition();
                
                recognition.continuous = false;
                recognition.interimResults = true; // Enable interim results
                recognition.lang = 'en-US';
                recognition.maxAlternatives = 1;
                
                recognition.onstart = function() {
                    isListening = true;
                    updateVoiceButton('listening');
                    updateVoiceCommandText('Listening... Speak now!');
                };
                
                recognition.onresult = function(event) {
                    let finalTranscript = '';
                    let interimTranscript = '';
                    
                    for (let i = event.resultIndex; i < event.results.length; i++) {
                        const transcript = event.results[i][0].transcript;
                        if (event.results[i].isFinal) {
                            finalTranscript += transcript;
                        } else {
                            interimTranscript += transcript;
                        }
                    }
                    
                    if (finalTranscript) {
                        updateVoiceCommandText(finalTranscript);
                        processVoiceCommand(finalTranscript);
                    } else if (interimTranscript) {
                        updateVoiceCommandText(`Hearing: ${interimTranscript}`);
                    }
                };
                
                recognition.onerror = function(event) {
                    console.error('Speech recognition error:', event.error);
                    isListening = false;
                    updateVoiceButton('ready');
                    
                    let errorMessage = '';
                    switch(event.error) {
                        case 'network':
                            errorMessage = 'Network error - switching to offline mode';
                            updateVoiceCommandText('🔄 Network Error - Switching to Offline Mode');
                            showNetworkWarning();
                            // Switch to offline mode immediately
                            setTimeout(() => {
                                initOfflineMode();
                            }, 1000);
                            break;
                        case 'not-allowed':
                            errorMessage = 'Microphone access denied - please allow microphone permissions';
                            updateVoiceCommandText('❌ Microphone blocked - Enable microphone in browser settings');
                            break;
                        case 'no-speech':
                            errorMessage = 'No speech detected - please try again';
                            updateVoiceCommandText('❌ No speech heard - Click and try again');
                            break;
                        case 'audio-capture':
                            errorMessage = 'Microphone not found - check your microphone';
                            updateVoiceCommandText('❌ Microphone not found - Check device settings');
                            break;
                        case 'service-not-allowed':
                            errorMessage = 'Speech service blocked - try HTTPS or different browser';
                            updateVoiceCommandText('❌ Service blocked - Try Chrome with HTTPS');
                            showFallbackInput();
                            break;
                        default:
                            errorMessage = `Speech error: ${event.error}`;
                            updateVoiceCommandText(`❌ Error: ${event.error}`);
                    }
                    
                    console.log('Speech recognition error details:', errorMessage);
                    // Don't speak error messages to avoid audio conflicts
                };
                
                recognition.onend = function() {
                    isListening = false;
                    updateVoiceButton('ready');
                    
                    // If stopped without result, show helpful message
                    if (!document.getElementById('voiceCommandText').textContent.includes('✓') && 
                        !document.getElementById('voiceCommandText').textContent.includes('❌')) {
                        updateVoiceCommandText('No command received - try again');
                    }
                };
            } else {
                console.warn('Speech recognition not supported');
                updateVoiceButton('unsupported');
                showFallbackInput();
            }
        }
        
        // Initialize offline mode with keyboard shortcuts
        function initOfflineMode() {
            useOfflineMode = true;
            updateVoiceButton('offline');
            
            // Add keyboard shortcuts for common moves
            document.addEventListener('keydown', handleKeyboardShortcuts);
            
            // Show offline help
            showOfflineHelp();
        }
        
        // Keyboard shortcuts for chess moves
        function handleKeyboardShortcuts(event) {
            if (!isPlayerTurn || event.target.tagName === 'INPUT') return;
            
            const key = event.key.toLowerCase();
            let move = null;
            
            switch(key) {
                case 'e': move = 'e4'; break;  // Most common opening
                case 'd': move = 'd4'; break;  // Queen's pawn
                case 'n': move = 'Nf3'; break; // Knight development
                case 'b': move = 'Bc4'; break; // Bishop development
                case 'q': move = 'Qh5'; break; // Scholar's mate queen
                case 'o': move = 'O-O'; break; // Castle kingside
                case 'c': 
                    // Show move input dialog
                    showMoveInputDialog();
                    return;
                case 'h':
                    // Show help
                    showKeyboardHelp();
                    return;
            }
            
            if (move) {
                event.preventDefault();
                processTypedMove(move);
            }
        }
        
        function showOfflineHelp() {
            const helpHtml = `
                <div id="offlineHelp" class="mt-4 p-4 bg-yellow-500 bg-opacity-20 border border-yellow-400 rounded-lg text-yellow-200 text-sm">
                    <h4 class="font-semibold mb-2">
                        <i class="fas fa-keyboard mr-2"></i>Offline Mode - Keyboard Shortcuts
                    </h4>
                    <div class="grid grid-cols-2 gap-2 text-xs">
                        <div><kbd class="bg-black bg-opacity-30 px-1 rounded">E</kbd> = e4 (King's pawn)</div>
                        <div><kbd class="bg-black bg-opacity-30 px-1 rounded">D</kbd> = d4 (Queen's pawn)</div>
                        <div><kbd class="bg-black bg-opacity-30 px-1 rounded">N</kbd> = Nf3 (Knight)</div>
                        <div><kbd class="bg-black bg-opacity-30 px-1 rounded">B</kbd> = Bc4 (Bishop)</div>
                        <div><kbd class="bg-black bg-opacity-30 px-1 rounded">Q</kbd> = Qh5 (Queen)</div>
                        <div><kbd class="bg-black bg-opacity-30 px-1 rounded">O</kbd> = O-O (Castle)</div>
                        <div><kbd class="bg-black bg-opacity-30 px-1 rounded">C</kbd> = Custom move</div>
                        <div><kbd class="bg-black bg-opacity-30 px-1 rounded">H</kbd> = Help</div>
                    </div>
                </div>
            `;
            
            const container = document.querySelector('.voice-command-display').parentNode;
            if (!document.getElementById('offlineHelp')) {
                container.insertAdjacentHTML('afterend', helpHtml);
            }
        }
        
        // Text-to-Speech Function
        function speak(text) {
            if (!speechEnabled || !speechSynthesis) return;
            
            // Cancel any ongoing speech
            speechSynthesis.cancel();
            
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.rate = 0.9;
            utterance.pitch = 1;
            utterance.volume = 0.8;
            
            speechSynthesis.speak(utterance);
        }
        
        // Voice Command Processing
        async function processVoiceCommand(command) {
            updateVoiceButton('processing');
            updateVoiceCommandText(`Processing: "${command}"`);
            
            try {
                const response = await fetch('/api/voice-command', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        command: command,
                        fen: game.fen()
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Valid move - update the board
                    const move = game.move(data.move.san || data.move);
                    if (move) {
                        updateMoveHistory(move);
                        updateBoard();
                        updateGameStatus();
                        
                        // Speak confirmation
                        speak(`${move.piece} to ${move.to}`);
                        
                        updateVoiceCommandText(`✓ ${command} → ${move.san}`);
                        
                        if (!game.game_over()) {
                            makeAIMove();
                        }
                    }
                } else {
                    // Try direct chess notation as fallback
                    try {
                        const directMove = game.move(command.trim());
                        if (directMove) {
                            updateMoveHistory(directMove);
                            updateBoard();
                            updateGameStatus();
                            speak(`${directMove.piece} to ${directMove.to}`);
                            updateVoiceCommandText(`✓ Direct: ${command} → ${directMove.san}`);
                            
                            if (!game.game_over()) {
                                makeAIMove();
                            }
                        } else {
                            // Neither parsing nor direct notation worked
                            updateVoiceCommandText(`✗ ${command} - ${data.error}`);
                            speak(data.error);
                        }
                    } catch (directError) {
                        // Neither parsing nor direct notation worked
                        updateVoiceCommandText(`✗ ${command} - ${data.error}`);
                        speak(data.error);
                    }
                }
            } catch (error) {
                console.error('Voice command error:', error);
                updateVoiceCommandText(`✗ Error processing command`);
                speak('Sorry, there was an error processing your command.');
            }
            
            updateVoiceButton('ready');
        }
        
        // Show fallback text input when voice recognition fails
        function showFallbackInput() {
            const voiceBtn = document.getElementById('voiceBtn');
            const fallbackHtml = `
                <div class="mt-3 p-3 bg-blue-500 bg-opacity-20 rounded-lg">
                    <label class="text-blue-300 text-sm font-medium block mb-2">
                        <i class="fas fa-keyboard mr-1"></i>Type your move:
                    </label>
                    <div class="flex space-x-2">
                        <input type="text" id="textMoveInput" 
                               class="flex-1 bg-white bg-opacity-20 text-white px-3 py-2 rounded border border-white border-opacity-30 focus:border-blue-400 focus:outline-none"
                               placeholder="e.g., e4, Nf3, O-O"
                               maxlength="10">
                        <button onclick="processTextMove()" 
                                class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded transition-all">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                    <div class="text-xs text-blue-300 mt-1 opacity-75">
                        Examples: e4, Nf3, Bc4, O-O, Qh5
                    </div>
                </div>
            `;
            
            if (!document.getElementById('textMoveInput')) {
                voiceBtn.parentNode.insertAdjacentHTML('afterend', fallbackHtml);
                
                // Add enter key support
                document.getElementById('textMoveInput').addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        processTextMove();
                    }
                });
            }
        }
        
        // Show move input dialog for custom moves
        function showMoveInputDialog() {
            const existingInput = document.getElementById('textMoveInput');
            if (existingInput) {
                existingInput.focus();
                return;
            }
            showFallbackInput();
            setTimeout(() => {
                document.getElementById('textMoveInput').focus();
            }, 100);
        }
        
        // Show keyboard help
        function showKeyboardHelp() {
            const helpText = `
                Keyboard Shortcuts:
                E = e4 (King's pawn)
                D = d4 (Queen's pawn)  
                N = Nf3 (Knight)
                B = Bc4 (Bishop)
                Q = Qh5 (Queen)
                O = O-O (Castle)
                C = Custom move
                H = This help
            `;
            updateVoiceCommandText('Keyboard shortcuts shown in console');
            console.log(helpText);
            alert(helpText);
        }
        
        // Process typed move (from keyboard shortcuts)
        async function processTypedMove(move) {
            updateVoiceCommandText(`Keyboard: ${move}`);
            
            // Try to make the move directly
            try {
                const chessMove = game.move(move);
                if (chessMove) {
                    updateMoveHistory(chessMove);
                    updateBoard();
                    updateGameStatus();
                    speak(`${chessMove.piece} to ${chessMove.to}`);
                    updateVoiceCommandText(`✓ Keyboard: ${move} → ${chessMove.san}`);
                    
                    if (!game.game_over()) {
                        makeAIMove();
                    }
                    return;
                }
            } catch (error) {
                // Move failed, try voice command processing
            }
            
            // Fallback to voice command processing
            await processVoiceCommand(move);
        }

        // Process text move input
        async function processTextMove() {
            const input = document.getElementById('textMoveInput');
            if (!input) return;
            
            const moveText = input.value.trim();
            if (!moveText) return;
            
            input.value = '';
            updateVoiceCommandText(`Typed: ${moveText}`);
            
            // Process as if it were a voice command
            await processVoiceCommand(moveText);
        }

        // Voice Button Management
        function updateVoiceButton(state) {
            const btn = document.getElementById('voiceBtn');
            const btnText = document.getElementById('voiceBtnText');
            
            btn.className = 'voice-button w-full p-4 rounded-lg font-semibold transition-all mb-3';
            
            switch(state) {
                case 'ready':
                    btn.className += ' bg-red-500 bg-opacity-30 hover:bg-opacity-50 text-white';
                    btn.disabled = false;
                    btnText.innerHTML = '<i class="fas fa-microphone mr-2"></i>Start Listening';
                    break;
                case 'listening':
                    btn.className += ' bg-red-600 bg-opacity-50 text-white listening';
                    btn.disabled = false;
                    btnText.innerHTML = '<i class="fas fa-microphone mr-2 pulse"></i>Listening...';
                    break;
                case 'processing':
                    btn.className += ' bg-yellow-500 bg-opacity-50 text-white processing';
                    btn.disabled = true;
                    btnText.innerHTML = '<i class="fas fa-cog mr-2"></i>Processing...';
                    break;
                case 'unsupported':
                    btn.className += ' bg-gray-500 bg-opacity-50 text-gray-300 cursor-not-allowed';
                    btn.disabled = true;
                    btnText.innerHTML = '<i class="fas fa-microphone-slash mr-2"></i>Voice Not Supported';
                    break;
                case 'offline':
                    btn.className += ' bg-yellow-500 bg-opacity-50 text-yellow-300 cursor-not-allowed';
                    btn.disabled = true;
                    btnText.innerHTML = '<i class="fas fa-keyboard mr-2"></i>Offline Mode - Use Keyboard';
                    break;
            }
        }
        
        function updateVoiceCommandText(text) {
            document.getElementById('voiceCommandText').textContent = text;
        }
        
        function showNetworkWarning() {
            const warning = document.getElementById('networkWarning');
            if (warning) {
                warning.classList.remove('hidden');
                warning.classList.add('network-warning');
                
                // Remove the animation class after animation completes
                setTimeout(() => {
                    warning.classList.remove('network-warning');
                }, 500);
            }
        }
        
        // Voice Button Event Listener
        document.getElementById('voiceBtn').addEventListener('click', function() {
            if (!recognition || !isPlayerTurn || this.disabled) return;
            
            if (isListening) {
                recognition.stop();
                updateVoiceCommandText('Stopped listening');
            } else {
                try {
                    // Clear previous messages
                    updateVoiceCommandText('Starting microphone...');
                    recognition.start();
                } catch (error) {
                    console.error('Error starting speech recognition:', error);
                    updateVoiceCommandText('❌ Cannot start microphone - ' + error.message);
                    updateVoiceButton('ready');
                    showFallbackInput();
                }
            }
        });
        
        // Speech Toggle
        document.getElementById('toggleSpeechBtn').addEventListener('click', function() {
            speechEnabled = !speechEnabled;
            const toggleText = document.getElementById('speechToggleText');
            const icon = this.querySelector('i');
            
            if (speechEnabled) {
                toggleText.textContent = 'Speech: ON';
                icon.className = 'fas fa-volume-up mr-2';
                speak('Speech feedback enabled');
            } else {
                toggleText.textContent = 'Speech: OFF';
                icon.className = 'fas fa-volume-mute mr-2';
            }
        });
        
        // Initialize the chess board
        function initBoard() {
            gameBoard.innerHTML = '';
            
            for (let row = 0; row < 8; row++) {
                for (let col = 0; col < 8; col++) {
                    const square = document.createElement('div');
                    square.className = `square ${(row + col) % 2 === 0 ? 'light' : 'dark'}`;
                    square.dataset.square = String.fromCharCode(97 + col) + (8 - row);
                    
                    // Add piece if exists
                    const piece = game.get(square.dataset.square);
                    if (piece) {
                        square.innerHTML = getPieceUnicode(piece);
                    }
                    
                    square.addEventListener('click', handleSquareClick);
                    gameBoard.appendChild(square);
                }
            }
        }
        
        function getPieceUnicode(piece) {
            const pieces = {
                'K': '♔', 'Q': '♕', 'R': '♖', 'B': '♗', 'N': '♘', 'P': '♙',
                'k': '♚', 'q': '♛', 'r': '♜', 'b': '♝', 'n': '♞', 'p': '♟'
            };
            const symbol = piece.color === 'w' ? piece.type.toUpperCase() : piece.type.toLowerCase();
            return `<span class="piece ${piece.color === 'w' ? 'white' : 'black'}">${pieces[symbol]}</span>`;
        }
        
        let selectedSquare = null;
        
        function handleSquareClick(e) {
            if (!isPlayerTurn) return;
            
            const square = e.currentTarget.dataset.square;
            
            if (selectedSquare === null) {
                const piece = game.get(square);
                if (piece && piece.color === 'w') {
                    selectedSquare = square;
                    e.currentTarget.classList.add('highlight');
                }
            } else {
                // Try to make move
                const move = game.move({
                    from: selectedSquare,
                    to: square,
                    promotion: 'q' // Always promote to queen
                });
                
                if (move) {
                    updateMoveHistory(move);
                    updateBoard();
                    updateGameStatus();
                    
                    // Speak move confirmation
                    speak(`${move.piece} to ${move.to}`);
                    
                    if (!game.game_over()) {
                        makeAIMove();
                    }
                } else {
                    // Invalid move, try selecting new piece
                    clearSelection();
                    const piece = game.get(square);
                    if (piece && piece.color === 'w') {
                        selectedSquare = square;
                        e.currentTarget.classList.add('highlight');
                    }
                }
            }
        }
        
        function clearSelection() {
            selectedSquare = null;
            document.querySelectorAll('.square').forEach(sq => {
                sq.classList.remove('highlight');
            });
        }
        
        async function makeAIMove() {
            isPlayerTurn = false;
            updateAIStatus('AI is thinking...', true);
            
            try {
                const response = await fetch('/api/ai-move', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        fen: game.fen(),
                        difficulty: difficulty
                    })
                });
                
                const data = await response.json();
                
                if (data.move) {
                    setTimeout(() => {
                        const move = game.move(data.move);
                        if (move) {
                            updateMoveHistory(move);
                            updateBoard();
                            updateGameStatus();
                            
                            // Speak AI move
                            speak(`AI plays ${move.piece} to ${move.to}`);
                        }
                        
                        updateAIStatus('AI Ready', false);
                        isPlayerTurn = true;
                    }, 1000); // Add thinking delay
                } else {
                    updateAIStatus('AI Error', false);
                    isPlayerTurn = true;
                }
            } catch (error) {
                console.error('AI move error:', error);
                updateAIStatus('AI Error', false);
                isPlayerTurn = true;
            }
        }
        
        function updateAIStatus(status, thinking) {
            const aiStatus = document.getElementById('aiStatus');
            const indicator = aiStatus.querySelector('.w-2');
            
            aiStatus.querySelector('span').textContent = status;
            
            if (thinking) {
                indicator.classList.add('ai-thinking');
            } else {
                indicator.classList.remove('ai-thinking');
            }
        }
        
        function updateBoard() {
            clearSelection();
            initBoard();
        }
        
        function updateMoveHistory(move) {
            const historyDiv = document.getElementById('moveHistory');
            const moveDiv = document.createElement('div');
            moveDiv.className = 'text-white text-sm py-1';
            moveDiv.textContent = `${Math.ceil(game.history().length / 2)}. ${move.san}`;
            historyDiv.appendChild(moveDiv);
            historyDiv.scrollTop = historyDiv.scrollHeight;
        }
        
        function updateGameStatus() {
            const currentTurn = document.getElementById('currentTurn');
            const gameStatus = document.getElementById('gameStatus');
            
            if (game.game_over()) {
                if (game.in_checkmate()) {
                    const winner = game.turn() === 'w' ? 'Black Wins!' : 'White Wins!';
                    gameStatus.textContent = winner;
                    gameStatus.className = 'font-semibold text-red-400';
                    speak(`Game over. ${winner}`);
                } else {
                    gameStatus.textContent = 'Draw';
                    gameStatus.className = 'font-semibold text-yellow-400';
                    speak('Game over. It\'s a draw');
                }
                currentTurn.textContent = 'Game Over';
            } else {
                currentTurn.textContent = game.turn() === 'w' ? 'White to move' : 'Black to move';
                gameStatus.textContent = 'In Progress';
                
                // Check for check
                if (game.in_check()) {
                    speak('Check!');
                }
            }
        }
        
        // New Game button
        document.getElementById('newGameBtn').addEventListener('click', () => {
            game.reset();
            isPlayerTurn = true;
            updateBoard();
            updateGameStatus();
            document.getElementById('moveHistory').innerHTML = '<p class="text-white opacity-60 text-center">Make your first move!</p>';
            updateAIStatus('AI Ready', false);
            updateVoiceCommandText('Click "Start Listening" to begin');
            speak('New game started');
        });
        
        // Undo button
        document.getElementById('undoBtn').addEventListener('click', () => {
            if (game.history().length >= 2) {
                game.undo(); // Undo AI move
                game.undo(); // Undo player move
                updateBoard();
                updateGameStatus();
                isPlayerTurn = true;
                speak('Move undone');
            }
        });
        
        // Initialize everything
        initSpeechRecognition();
        initBoard();
        updateGameStatus();
        speak('Welcome to voice chess. Click start listening to make your move.');
    </script>
</body>
</html>